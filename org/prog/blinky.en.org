#+title: Blinky
#+weight: 1

Blinky is the "Hello World" sample program of the embedded world.
Most embedded Devices have no display for writing a message, but a
led which could be turned on and off is almost always a part of a
development board.

* Program files
We start with the code given from the
[[file:prog/blinky]] directory.

#+begin_src bash :results output ; :eval no-export :exports results :wrap src shell
  tree prog/blinky --noreport 
#+end_src
#+name: files
#+attr_html: :style line-height: 1.0;
#+results:
#+begin_src shell
prog/blinky
├── CMakeLists.txt
├── prj.conf
└── src
    └── main.c
#+end_src

** CMakeLists.txt
#+name: cmake
#+begin_src cmake -n 1 :tangle prog/blinky/CMakeLists.txt
  cmake_minimum_required(VERSION 3.20.0)
  find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
  project(blinky)
  target_sources(app PRIVATE src/main.c)
#+end_src
This file contains the information where to find the sources of the project.
Here we have only one source file ~src/main.c~

** prj.conf
#+name: prj
#+begin_src conf -n :tangle prog/blinky/prj.conf
CONFIG_GPIO=y
#+end_src
The project configuration file tells which components of the kernel are needed
and linked into the firmware.
Here we need the ~GPIO~ - General Purpose In/Out Subsystem. 

** main.c
~main.c~ is the name of the main source file of our program which
is written in the C programming language.
#+name: main-1
#+begin_src C -n 
/*
 * Copyright (c) 2016 Intel Corporation
 *
 * SPDX-License-Identifier: Apache-2.0
 */
#+end_src
This is the copyright remark. In C the ~/*~ starts an comment which
is closed by an corresponding ~*/~. This kind of comments can
span over multiple lines whereas an ~//~ double slash gives room for
comments until the line ends.
#+name: main-2
#+begin_src C +n
#include <zephyr.h>
#include <drivers/gpio.h>
#+end_src
All keywords in C which start with ~#~ are preprocessor
directives. ~#include <file.h>~ loads an so called
header file which contains the interface of declarations
we will make use of. If ~<~ and ~>~ are used to surround
the filename the path to the file will be search by the compiler
using the given include pathes. In opposite if the file is
enclosed with ~"~ then the path is relative to the file which
contains the include directive.
#+name: main-3
#+begin_src C +n
/* 1000 msec = 1 sec */
#define SLEEP_TIME_MS   1000

/* The devicetree node identifier for the "led0" alias. */
#define LED0_NODE DT_ALIAS(led0)
#+end_src
Here again we have a preprocessor directive. ~#define PLACEHOLDER value~ creates an
macro which simply replaces all occurences of ~PLACEHOLDER~ with the given ~value~.
Usually the placeholders are writen with capitals, but this is not mandatory. It is often
made this way for distinct macros from functions and variables which are often written with
lower case letters.

Macros can also be defined to have arguments. Here we use such a macro ~DT_ALIAS~
with argument ~led0~ as value for our macro ~LED0_NODE~.
~led0~ is an alias which has to be defined for the board we use and describes on
which port and pin the led 0 (Light Emiting Diode) is connected.
#+name: main-4
#+begin_src C +n
/*
 * A build error on this line means your board is unsupported.
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);
#+end_src
This C declaration declares an identifier ~led0~ for a fixed (~static~) portion of
read only (~const~) memory which can contain structured data (~struct~) defined
with the name ~gpio_dt_spec~ and initialized with the result of the macro call
~GPIO_DT_SPEC_GET(LED0_NODE, gpios)~.  
#+name: main-5
#+begin_src C +n 
  void main(void)
  {
#+end_src
Here we define our main routine of the program, ~void main(void)~ is the so called entry
point which will be called to start the application. ~void~ designates an no value thus this
function will not return a value and will not have any argument. Writing ~void main()~ is
equvalent to the former form with an ~void~ argument. The body of the function will be enclosed
in the curly brackets ~{}~.
#+name: main-6
#+begin_src C +n -i
    int ret;
#+end_src
This line says that we reserve memory for holding an integer - ~int~
value which can be accessed with name ~ret~. This is uninitialized
memory, so no specific value was written there up to now. 
#+name: main-7 
#+begin_src C +n -i
    if (!device_is_ready(led.port)) {
      return;
    }
#+end_src
Here we have a conditional clause called ~if~. If the condition in
the parentheses is true, then the statements following the curly braces
are executed. 
Conditionals are described on [[file:~/prog/nodecum.org/nodecum-learning/org/static/books/c-prog-lang.pdf#page=79][page 79 in the C Programming Language]].
Zephyr follows at least the C99 specification which has added the support
of boolean values with the type ~bool~ to the language.
(See [[https://docs.zephyrproject.org/latest/develop/languages/c/index.html][C Language Support]])
The exclamation mark ~!~ is a negation operator,
this will result to the behavior that
if the function ~device_is_ready~ returns false, which means that the
device is not ready for use, than the directly following statement ( here
the block ~{ return; }~ will be executed.
See [[https://docs.zephyrproject.org/latest/doxygen/html/group__device__model.html][here]] for the description of the ~device_is_ready~ function.
~return~ will leave our ~main~ function, thus will end our program.
This means, in case that the device could not be initialized correctly,
our program will be terminated here.
#+name: main-8
#+begin_src C +n -i
    ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
    if (ret < 0) {
      return;
    }
#+end_src
Calling ~gpio_pin_configure_dt~ and store the integer result into ~ret~. 
Looking up the documentation of ~gpio_pin_configure_dt~ in 
[[https://docs.zephyrproject.org/latest/doxygen/html/group__gpio__interface.html][GPIO Driver APIs]] shows that the function returns zero on success and negative
values which describe the occured error conditions. ~GPIO_OUTPUT_ACTIVE~
configures the specified GPIO pin as output and initializes it to a logic 1. 
Again the program will be terminated by calling ~return~ if an error has occured.
#+name: main-9
#+begin_src C +n -i
    while (1) {
      ret = gpio_pin_toggle_dt(&led);
      if (ret < 0) {
        return;
      }
      k_msleep(SLEEP_TIME_MS);
    }
#+end_src
The ~while~ keyword describes a 'while' loop, if the condition in the braces ~( 1 )~
is true ( not zero ), the following statement, ~{ ... }~ will be executed.
Here the condition is always true, thus at the first glance an never ending
loop was programmed. But if we look further we see that if ~gpio_pin_toggle_dt~
will return an error condition (~ret < 0~ ), ~return~ will be called which causes
the termination of the ~main~ function.
Calling ~gpio_pin_toggle_dt~ will vary the state of the pin between high and low,
lighting the LED or switching it off.

~k_msleep~ puts the current thread to sleep for the time given in milliseconds.
This means that the execution will be stoped for the given time. After this the pin
will be toggled again and so on.
#+name: main-10
#+begin_src C +n -i
  }
#+end_src
The closing brace of the body of the ~main~ function declaration.

Here is the complete listing of the program:
#+BEGIN_SRC C -n -i :tangle prog/src/main.c :noweb yes 
  <<main-1>>
  <<main-2>>
  <<main-3>>
  <<main-4>>
  <<main-5>>
  <<main-6>>
  <<main-7>>
  <<main-8>>
  <<main-9>>
  <<main-10>>
#+END_SRC
* Build the program

* Transfer the program 

#+begin_src svgbob  :cmd svgbob_cli :file ../static/images/blinky.svg :eval no-export 
	  +------------+   JTAG    +----------------+
      USB | Black      +-o-------o-+ Adafruit       |
      o---+ Magic      |TX      RX | feather        |
	  | Probe      +-o-------o-+ nrf52840       |
	  |            |RX      TX |                |
	  |            +-o-------o-+                |
	  |            |           |                |
	  +------------+           +--+-------------+
                                      |
                                      o USB	
#+end_src  
 
#+results:
[[file:../static/images/blinky.svg]]

